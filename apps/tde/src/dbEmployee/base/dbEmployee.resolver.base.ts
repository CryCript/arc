/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { DbEmployee } from "./DbEmployee";
import { DbEmployeeCountArgs } from "./DbEmployeeCountArgs";
import { DbEmployeeFindManyArgs } from "./DbEmployeeFindManyArgs";
import { DbEmployeeFindUniqueArgs } from "./DbEmployeeFindUniqueArgs";
import { CreateDbEmployeeArgs } from "./CreateDbEmployeeArgs";
import { UpdateDbEmployeeArgs } from "./UpdateDbEmployeeArgs";
import { DeleteDbEmployeeArgs } from "./DeleteDbEmployeeArgs";
import { DbCompany } from "../../dbCompany/base/DbCompany";
import { SbEmployee } from "../../sbEmployee/base/SbEmployee";
import { DbEmployeeService } from "../dbEmployee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => DbEmployee)
export class DbEmployeeResolverBase {
  constructor(
    protected readonly service: DbEmployeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "DbEmployee",
    action: "read",
    possession: "any",
  })
  async _dbEmployeesMeta(
    @graphql.Args() args: DbEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [DbEmployee])
  @nestAccessControl.UseRoles({
    resource: "DbEmployee",
    action: "read",
    possession: "any",
  })
  async dbEmployees(
    @graphql.Args() args: DbEmployeeFindManyArgs
  ): Promise<DbEmployee[]> {
    return this.service.dbEmployees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => DbEmployee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "DbEmployee",
    action: "read",
    possession: "own",
  })
  async dbEmployee(
    @graphql.Args() args: DbEmployeeFindUniqueArgs
  ): Promise<DbEmployee | null> {
    const result = await this.service.dbEmployee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DbEmployee)
  @nestAccessControl.UseRoles({
    resource: "DbEmployee",
    action: "create",
    possession: "any",
  })
  async createDbEmployee(
    @graphql.Args() args: CreateDbEmployeeArgs
  ): Promise<DbEmployee> {
    return await this.service.createDbEmployee({
      ...args,
      data: {
        ...args.data,

        companyId: args.data.companyId
          ? {
              connect: args.data.companyId,
            }
          : undefined,

        sbEmployees: args.data.sbEmployees
          ? {
              connect: args.data.sbEmployees,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => DbEmployee)
  @nestAccessControl.UseRoles({
    resource: "DbEmployee",
    action: "update",
    possession: "any",
  })
  async updateDbEmployee(
    @graphql.Args() args: UpdateDbEmployeeArgs
  ): Promise<DbEmployee | null> {
    try {
      return await this.service.updateDbEmployee({
        ...args,
        data: {
          ...args.data,

          companyId: args.data.companyId
            ? {
                connect: args.data.companyId,
              }
            : undefined,

          sbEmployees: args.data.sbEmployees
            ? {
                connect: args.data.sbEmployees,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => DbEmployee)
  @nestAccessControl.UseRoles({
    resource: "DbEmployee",
    action: "delete",
    possession: "any",
  })
  async deleteDbEmployee(
    @graphql.Args() args: DeleteDbEmployeeArgs
  ): Promise<DbEmployee | null> {
    try {
      return await this.service.deleteDbEmployee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DbCompany, {
    nullable: true,
    name: "companyId",
  })
  @nestAccessControl.UseRoles({
    resource: "DbCompany",
    action: "read",
    possession: "any",
  })
  async getCompanyId(
    @graphql.Parent() parent: DbEmployee
  ): Promise<DbCompany | null> {
    const result = await this.service.getCompanyId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SbEmployee, {
    nullable: true,
    name: "sbEmployees",
  })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "any",
  })
  async getSbEmployees(
    @graphql.Parent() parent: DbEmployee
  ): Promise<SbEmployee | null> {
    const result = await this.service.getSbEmployees(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
