/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  SbOrder as PrismaSbOrder,
  SbEmployee as PrismaSbEmployee,
} from "@prisma/client";

export class SbOrderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SbOrderCountArgs, "select">): Promise<number> {
    return this.prisma.sbOrder.count(args);
  }

  async sbOrders<T extends Prisma.SbOrderFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbOrderFindManyArgs>
  ): Promise<PrismaSbOrder[]> {
    return this.prisma.sbOrder.findMany<Prisma.SbOrderFindManyArgs>(args);
  }
  async sbOrder<T extends Prisma.SbOrderFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbOrderFindUniqueArgs>
  ): Promise<PrismaSbOrder | null> {
    return this.prisma.sbOrder.findUnique(args);
  }
  async createSbOrder<T extends Prisma.SbOrderCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbOrderCreateArgs>
  ): Promise<PrismaSbOrder> {
    return this.prisma.sbOrder.create<T>(args);
  }
  async updateSbOrder<T extends Prisma.SbOrderUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbOrderUpdateArgs>
  ): Promise<PrismaSbOrder> {
    return this.prisma.sbOrder.update<T>(args);
  }
  async deleteSbOrder<T extends Prisma.SbOrderDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbOrderDeleteArgs>
  ): Promise<PrismaSbOrder> {
    return this.prisma.sbOrder.delete(args);
  }

  async getEmployeeId(parentId: string): Promise<PrismaSbEmployee | null> {
    return this.prisma.sbOrder
      .findUnique({
        where: { id: parentId },
      })
      .employeeId();
  }
}
