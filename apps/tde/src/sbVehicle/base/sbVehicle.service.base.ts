/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SbVehicle as PrismaSbVehicle,
  SbEmployee as PrismaSbEmployee,
  SbProvider as PrismaSbProvider,
  SbRoute as PrismaSbRoute,
} from "@prisma/client";

import { LocalStorageService } from "src/storage/providers/local/local.storage.service";
import { InputJsonValue } from "src/types";
import { FileDownload, FileUpload } from "src/storage/base/storage.types";
import { LocalStorageFile } from "src/storage/providers/local/local.storage.types";

export class SbVehicleServiceBase {
  constructor(
    protected readonly prisma: PrismaService,
    protected readonly localStorageService: LocalStorageService
  ) {}

  async count(
    args: Omit<Prisma.SbVehicleCountArgs, "select">
  ): Promise<number> {
    return this.prisma.sbVehicle.count(args);
  }

  async sbVehicles<T extends Prisma.SbVehicleFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleFindManyArgs>
  ): Promise<PrismaSbVehicle[]> {
    return this.prisma.sbVehicle.findMany<Prisma.SbVehicleFindManyArgs>(args);
  }
  async sbVehicle<T extends Prisma.SbVehicleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleFindUniqueArgs>
  ): Promise<PrismaSbVehicle | null> {
    return this.prisma.sbVehicle.findUnique(args);
  }
  async createSbVehicle<T extends Prisma.SbVehicleCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleCreateArgs>
  ): Promise<PrismaSbVehicle> {
    return this.prisma.sbVehicle.create<T>(args);
  }
  async updateSbVehicle<T extends Prisma.SbVehicleUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleUpdateArgs>
  ): Promise<PrismaSbVehicle> {
    return this.prisma.sbVehicle.update<T>(args);
  }
  async deleteSbVehicle<T extends Prisma.SbVehicleDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleDeleteArgs>
  ): Promise<PrismaSbVehicle> {
    return this.prisma.sbVehicle.delete(args);
  }

  async uploadDriverPhoto<T extends Prisma.SbVehicleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaSbVehicle> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/SBD/Driver";
    const driverPhoto = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.sbVehicle.update({
      where: args.where,

      data: {
        driverPhoto: driverPhoto as InputJsonValue,
      },
    });
  }

  async downloadDriverPhoto<T extends Prisma.SbVehicleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleFindUniqueArgs>
  ): Promise<FileDownload> {
    const { driverPhoto } = await this.prisma.sbVehicle.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      driverPhoto as unknown as LocalStorageFile
    );
  }

  async deleteDriverPhoto<T extends Prisma.SbVehicleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleFindUniqueArgs>
  ): Promise<PrismaSbVehicle> {
    const { driverPhoto } = await this.prisma.sbVehicle.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      driverPhoto as unknown as LocalStorageFile
    );

    return await this.prisma.sbVehicle.update({
      where: args.where,

      data: {
        driverPhoto: Prisma.DbNull,
      },
    });
  }

  async uploadVehiclePhoto<T extends Prisma.SbVehicleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleFindUniqueArgs>,
    file: FileUpload
  ): Promise<PrismaSbVehicle> {
    file.filename = `profilePicture-${args.where.id}.${file.filename
      .split(".")
      .pop()}`;
    const containerPath = "/SB/Vehicle";
    const vehiclePhoto = await this.localStorageService.uploadFile(
      file,
      [],
      1000000,
      containerPath
    );

    return await this.prisma.sbVehicle.update({
      where: args.where,

      data: {
        vehiclePhoto: vehiclePhoto as InputJsonValue,
      },
    });
  }

  async downloadVehiclePhoto<T extends Prisma.SbVehicleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleFindUniqueArgs>
  ): Promise<FileDownload> {
    const { vehiclePhoto } = await this.prisma.sbVehicle.findUniqueOrThrow({
      where: args.where,
    });

    return await this.localStorageService.downloadFile(
      vehiclePhoto as unknown as LocalStorageFile
    );
  }

  async deleteVehiclePhoto<T extends Prisma.SbVehicleFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbVehicleFindUniqueArgs>
  ): Promise<PrismaSbVehicle> {
    const { vehiclePhoto } = await this.prisma.sbVehicle.findUniqueOrThrow({
      where: args.where,
    });

    await this.localStorageService.deleteFile(
      vehiclePhoto as unknown as LocalStorageFile
    );

    return await this.prisma.sbVehicle.update({
      where: args.where,

      data: {
        vehiclePhoto: Prisma.DbNull,
      },
    });
  }

  async findSbEmployee(
    parentId: string,
    args: Prisma.SbEmployeeFindManyArgs
  ): Promise<PrismaSbEmployee[]> {
    return this.prisma.sbVehicle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sbEmployee(args);
  }

  async findSbEmployees(
    parentId: string,
    args: Prisma.SbEmployeeFindManyArgs
  ): Promise<PrismaSbEmployee[]> {
    return this.prisma.sbVehicle
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sbEmployees(args);
  }

  async getCompany(parentId: string): Promise<PrismaSbProvider | null> {
    return this.prisma.sbVehicle
      .findUnique({
        where: { id: parentId },
      })
      .company();
  }

  async getRoute(parentId: string): Promise<PrismaSbRoute | null> {
    return this.prisma.sbVehicle
      .findUnique({
        where: { id: parentId },
      })
      .route();
  }
}
