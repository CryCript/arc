/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { GraphQLUpload } from "graphql-upload";
import { FileUpload } from "src/storage/base/storage.types";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SbVehicle } from "./SbVehicle";
import { SbVehicleCountArgs } from "./SbVehicleCountArgs";
import { SbVehicleFindManyArgs } from "./SbVehicleFindManyArgs";
import { SbVehicleFindUniqueArgs } from "./SbVehicleFindUniqueArgs";
import { CreateSbVehicleArgs } from "./CreateSbVehicleArgs";
import { UpdateSbVehicleArgs } from "./UpdateSbVehicleArgs";
import { DeleteSbVehicleArgs } from "./DeleteSbVehicleArgs";
import { SbEmployeeFindManyArgs } from "../../sbEmployee/base/SbEmployeeFindManyArgs";
import { SbEmployee } from "../../sbEmployee/base/SbEmployee";
import { SbProvider } from "../../sbProvider/base/SbProvider";
import { SbRoute } from "../../sbRoute/base/SbRoute";
import { SbVehicleService } from "../sbVehicle.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SbVehicle)
export class SbVehicleResolverBase {
  constructor(
    protected readonly service: SbVehicleService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "any",
  })
  async _sbVehiclesMeta(
    @graphql.Args() args: SbVehicleCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SbVehicle])
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "any",
  })
  async sbVehicles(
    @graphql.Args() args: SbVehicleFindManyArgs
  ): Promise<SbVehicle[]> {
    return this.service.sbVehicles(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SbVehicle, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "own",
  })
  async sbVehicle(
    @graphql.Args() args: SbVehicleFindUniqueArgs
  ): Promise<SbVehicle | null> {
    const result = await this.service.sbVehicle(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbVehicle)
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "create",
    possession: "any",
  })
  async createSbVehicle(
    @graphql.Args() args: CreateSbVehicleArgs
  ): Promise<SbVehicle> {
    return await this.service.createSbVehicle({
      ...args,
      data: {
        ...args.data,

        providerId: args.data.providerId
          ? {
              connect: args.data.providerId,
            }
          : undefined,

        routeId: args.data.routeId
          ? {
              connect: args.data.routeId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbVehicle)
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "update",
    possession: "any",
  })
  async updateSbVehicle(
    @graphql.Args() args: UpdateSbVehicleArgs
  ): Promise<SbVehicle | null> {
    try {
      return await this.service.updateSbVehicle({
        ...args,
        data: {
          ...args.data,

          providerId: args.data.providerId
            ? {
                connect: args.data.providerId,
              }
            : undefined,

          routeId: args.data.routeId
            ? {
                connect: args.data.routeId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SbVehicle)
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "delete",
    possession: "any",
  })
  async deleteSbVehicle(
    @graphql.Args() args: DeleteSbVehicleArgs
  ): Promise<SbVehicle | null> {
    try {
      return await this.service.deleteSbVehicle(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SbVehicle)
  async uploadDriverPhoto(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: SbVehicleFindUniqueArgs
  ): Promise<SbVehicle> {
    return await this.service.uploadDriverPhoto(args, file);
  }

  @graphql.Mutation(() => SbVehicle)
  async deleteDriverPhoto(
    @graphql.Args()
    args: SbVehicleFindUniqueArgs
  ): Promise<SbVehicle> {
    return await this.service.deleteDriverPhoto(args);
  }

  @graphql.Mutation(() => SbVehicle)
  async uploadVehiclePhoto(
    @graphql.Args({
      name: "file",
      type: () => GraphQLUpload,
    })
    file: FileUpload,
    @graphql.Args()
    args: SbVehicleFindUniqueArgs
  ): Promise<SbVehicle> {
    return await this.service.uploadVehiclePhoto(args, file);
  }

  @graphql.Mutation(() => SbVehicle)
  async deleteVehiclePhoto(
    @graphql.Args()
    args: SbVehicleFindUniqueArgs
  ): Promise<SbVehicle> {
    return await this.service.deleteVehiclePhoto(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SbEmployee], { name: "sbEmployee" })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "any",
  })
  async findSbEmployee(
    @graphql.Parent() parent: SbVehicle,
    @graphql.Args() args: SbEmployeeFindManyArgs
  ): Promise<SbEmployee[]> {
    const results = await this.service.findSbEmployee(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SbEmployee], { name: "sbEmployees" })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "any",
  })
  async findSbEmployees(
    @graphql.Parent() parent: SbVehicle,
    @graphql.Args() args: SbEmployeeFindManyArgs
  ): Promise<SbEmployee[]> {
    const results = await this.service.findSbEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SbProvider, {
    nullable: true,
    name: "providerId",
  })
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "read",
    possession: "any",
  })
  async getProviderId(
    @graphql.Parent() parent: SbVehicle
  ): Promise<SbProvider | null> {
    const result = await this.service.getProviderId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SbRoute, {
    nullable: true,
    name: "routeId",
  })
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "read",
    possession: "any",
  })
  async getRouteId(
    @graphql.Parent() parent: SbVehicle
  ): Promise<SbRoute | null> {
    const result = await this.service.getRouteId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
