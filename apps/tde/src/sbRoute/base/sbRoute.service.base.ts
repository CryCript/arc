/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  SbRoute as PrismaSbRoute,
  SbPickupPoint as PrismaSbPickupPoint,
  SbVehicle as PrismaSbVehicle,
} from "@prisma/client";

export class SbRouteServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.SbRouteCountArgs, "select">): Promise<number> {
    return this.prisma.sbRoute.count(args);
  }

  async sbRoutes<T extends Prisma.SbRouteFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbRouteFindManyArgs>
  ): Promise<PrismaSbRoute[]> {
    return this.prisma.sbRoute.findMany<Prisma.SbRouteFindManyArgs>(args);
  }
  async sbRoute<T extends Prisma.SbRouteFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbRouteFindUniqueArgs>
  ): Promise<PrismaSbRoute | null> {
    return this.prisma.sbRoute.findUnique(args);
  }
  async createSbRoute<T extends Prisma.SbRouteCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbRouteCreateArgs>
  ): Promise<PrismaSbRoute> {
    return this.prisma.sbRoute.create<T>(args);
  }
  async updateSbRoute<T extends Prisma.SbRouteUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbRouteUpdateArgs>
  ): Promise<PrismaSbRoute> {
    return this.prisma.sbRoute.update<T>(args);
  }
  async deleteSbRoute<T extends Prisma.SbRouteDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SbRouteDeleteArgs>
  ): Promise<PrismaSbRoute> {
    return this.prisma.sbRoute.delete(args);
  }

  async findSbPickupPoints(
    parentId: string,
    args: Prisma.SbPickupPointFindManyArgs
  ): Promise<PrismaSbPickupPoint[]> {
    return this.prisma.sbRoute
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sbPickupPoints(args);
  }

  async findSbVehicles(
    parentId: string,
    args: Prisma.SbVehicleFindManyArgs
  ): Promise<PrismaSbVehicle[]> {
    return this.prisma.sbRoute
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .sbVehicles(args);
  }
}
