/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SbRouteService } from "../sbRoute.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SbRouteCreateInput } from "./SbRouteCreateInput";
import { SbRoute } from "./SbRoute";
import { SbRouteFindManyArgs } from "./SbRouteFindManyArgs";
import { SbRouteWhereUniqueInput } from "./SbRouteWhereUniqueInput";
import { SbRouteUpdateInput } from "./SbRouteUpdateInput";
import { SbPickupPointFindManyArgs } from "../../sbPickupPoint/base/SbPickupPointFindManyArgs";
import { SbPickupPoint } from "../../sbPickupPoint/base/SbPickupPoint";
import { SbPickupPointWhereUniqueInput } from "../../sbPickupPoint/base/SbPickupPointWhereUniqueInput";
import { SbVehicleFindManyArgs } from "../../sbVehicle/base/SbVehicleFindManyArgs";
import { SbVehicle } from "../../sbVehicle/base/SbVehicle";
import { SbVehicleWhereUniqueInput } from "../../sbVehicle/base/SbVehicleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SbRouteControllerBase {
  constructor(
    protected readonly service: SbRouteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SbRoute })
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSbRoute(
    @common.Body() data: SbRouteCreateInput
  ): Promise<SbRoute> {
    return await this.service.createSbRoute({
      data: data,
      select: {
        createdAt: true,
        id: true,
        maps: true,
        route: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SbRoute] })
  @ApiNestedQuery(SbRouteFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sbRoutes(@common.Req() request: Request): Promise<SbRoute[]> {
    const args = plainToClass(SbRouteFindManyArgs, request.query);
    return this.service.sbRoutes({
      ...args,
      select: {
        createdAt: true,
        id: true,
        maps: true,
        route: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SbRoute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sbRoute(
    @common.Param() params: SbRouteWhereUniqueInput
  ): Promise<SbRoute | null> {
    const result = await this.service.sbRoute({
      where: params,
      select: {
        createdAt: true,
        id: true,
        maps: true,
        route: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SbRoute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSbRoute(
    @common.Param() params: SbRouteWhereUniqueInput,
    @common.Body() data: SbRouteUpdateInput
  ): Promise<SbRoute | null> {
    try {
      return await this.service.updateSbRoute({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          maps: true,
          route: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SbRoute })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSbRoute(
    @common.Param() params: SbRouteWhereUniqueInput
  ): Promise<SbRoute | null> {
    try {
      return await this.service.deleteSbRoute({
        where: params,
        select: {
          createdAt: true,
          id: true,
          maps: true,
          route: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sbPickupPoints")
  @ApiNestedQuery(SbPickupPointFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "read",
    possession: "any",
  })
  async findSbPickupPoints(
    @common.Req() request: Request,
    @common.Param() params: SbRouteWhereUniqueInput
  ): Promise<SbPickupPoint[]> {
    const query = plainToClass(SbPickupPointFindManyArgs, request.query);
    const results = await this.service.findSbPickupPoints(params.id, {
      ...query,
      select: {
        createdAt: true,
        id: true,
        maps: true,
        pickupPoint: true,

        routeId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sbPickupPoints")
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "update",
    possession: "any",
  })
  async connectSbPickupPoints(
    @common.Param() params: SbRouteWhereUniqueInput,
    @common.Body() body: SbPickupPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbPickupPoints: {
        connect: body,
      },
    };
    await this.service.updateSbRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sbPickupPoints")
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "update",
    possession: "any",
  })
  async updateSbPickupPoints(
    @common.Param() params: SbRouteWhereUniqueInput,
    @common.Body() body: SbPickupPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbPickupPoints: {
        set: body,
      },
    };
    await this.service.updateSbRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sbPickupPoints")
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "update",
    possession: "any",
  })
  async disconnectSbPickupPoints(
    @common.Param() params: SbRouteWhereUniqueInput,
    @common.Body() body: SbPickupPointWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbPickupPoints: {
        disconnect: body,
      },
    };
    await this.service.updateSbRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sbVehicles")
  @ApiNestedQuery(SbVehicleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "any",
  })
  async findSbVehicles(
    @common.Req() request: Request,
    @common.Param() params: SbRouteWhereUniqueInput
  ): Promise<SbVehicle[]> {
    const query = plainToClass(SbVehicleFindManyArgs, request.query);
    const results = await this.service.findSbVehicles(params.id, {
      ...query,
      select: {
        createdAt: true,
        driver: true,
        driverPhoto: true,
        email: true,
        id: true,
        noPol: true,
        noUnit: true,
        phoneNo: true,

        providerId: {
          select: {
            id: true,
          },
        },

        routeId: {
          select: {
            id: true,
          },
        },

        shift: true,
        updatedAt: true,
        vehiclePhoto: true,
        vehicleType: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sbVehicles")
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "update",
    possession: "any",
  })
  async connectSbVehicles(
    @common.Param() params: SbRouteWhereUniqueInput,
    @common.Body() body: SbVehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbVehicles: {
        connect: body,
      },
    };
    await this.service.updateSbRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sbVehicles")
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "update",
    possession: "any",
  })
  async updateSbVehicles(
    @common.Param() params: SbRouteWhereUniqueInput,
    @common.Body() body: SbVehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbVehicles: {
        set: body,
      },
    };
    await this.service.updateSbRoute({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sbVehicles")
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "update",
    possession: "any",
  })
  async disconnectSbVehicles(
    @common.Param() params: SbRouteWhereUniqueInput,
    @common.Body() body: SbVehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbVehicles: {
        disconnect: body,
      },
    };
    await this.service.updateSbRoute({
      where: params,
      data,
      select: { id: true },
    });
  }
}
