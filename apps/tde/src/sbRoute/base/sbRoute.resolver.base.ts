/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SbRoute } from "./SbRoute";
import { SbRouteCountArgs } from "./SbRouteCountArgs";
import { SbRouteFindManyArgs } from "./SbRouteFindManyArgs";
import { SbRouteFindUniqueArgs } from "./SbRouteFindUniqueArgs";
import { CreateSbRouteArgs } from "./CreateSbRouteArgs";
import { UpdateSbRouteArgs } from "./UpdateSbRouteArgs";
import { DeleteSbRouteArgs } from "./DeleteSbRouteArgs";
import { SbPickupPointFindManyArgs } from "../../sbPickupPoint/base/SbPickupPointFindManyArgs";
import { SbPickupPoint } from "../../sbPickupPoint/base/SbPickupPoint";
import { SbVehicleFindManyArgs } from "../../sbVehicle/base/SbVehicleFindManyArgs";
import { SbVehicle } from "../../sbVehicle/base/SbVehicle";
import { SbRouteService } from "../sbRoute.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SbRoute)
export class SbRouteResolverBase {
  constructor(
    protected readonly service: SbRouteService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "read",
    possession: "any",
  })
  async _sbRoutesMeta(
    @graphql.Args() args: SbRouteCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SbRoute])
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "read",
    possession: "any",
  })
  async sbRoutes(
    @graphql.Args() args: SbRouteFindManyArgs
  ): Promise<SbRoute[]> {
    return this.service.sbRoutes(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SbRoute, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "read",
    possession: "own",
  })
  async sbRoute(
    @graphql.Args() args: SbRouteFindUniqueArgs
  ): Promise<SbRoute | null> {
    const result = await this.service.sbRoute(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbRoute)
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "create",
    possession: "any",
  })
  async createSbRoute(
    @graphql.Args() args: CreateSbRouteArgs
  ): Promise<SbRoute> {
    return await this.service.createSbRoute({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbRoute)
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "update",
    possession: "any",
  })
  async updateSbRoute(
    @graphql.Args() args: UpdateSbRouteArgs
  ): Promise<SbRoute | null> {
    try {
      return await this.service.updateSbRoute({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SbRoute)
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "delete",
    possession: "any",
  })
  async deleteSbRoute(
    @graphql.Args() args: DeleteSbRouteArgs
  ): Promise<SbRoute | null> {
    try {
      return await this.service.deleteSbRoute(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SbPickupPoint], { name: "sbPickupPoints" })
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "read",
    possession: "any",
  })
  async findSbPickupPoints(
    @graphql.Parent() parent: SbRoute,
    @graphql.Args() args: SbPickupPointFindManyArgs
  ): Promise<SbPickupPoint[]> {
    const results = await this.service.findSbPickupPoints(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SbVehicle], { name: "sbVehicles" })
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "any",
  })
  async findSbVehicles(
    @graphql.Parent() parent: SbRoute,
    @graphql.Args() args: SbVehicleFindManyArgs
  ): Promise<SbVehicle[]> {
    const results = await this.service.findSbVehicles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
