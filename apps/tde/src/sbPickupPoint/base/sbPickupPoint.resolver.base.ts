/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SbPickupPoint } from "./SbPickupPoint";
import { SbPickupPointCountArgs } from "./SbPickupPointCountArgs";
import { SbPickupPointFindManyArgs } from "./SbPickupPointFindManyArgs";
import { SbPickupPointFindUniqueArgs } from "./SbPickupPointFindUniqueArgs";
import { CreateSbPickupPointArgs } from "./CreateSbPickupPointArgs";
import { UpdateSbPickupPointArgs } from "./UpdateSbPickupPointArgs";
import { DeleteSbPickupPointArgs } from "./DeleteSbPickupPointArgs";
import { SbEmployeeFindManyArgs } from "../../sbEmployee/base/SbEmployeeFindManyArgs";
import { SbEmployee } from "../../sbEmployee/base/SbEmployee";
import { SbRoute } from "../../sbRoute/base/SbRoute";
import { SbPickupPointService } from "../sbPickupPoint.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SbPickupPoint)
export class SbPickupPointResolverBase {
  constructor(
    protected readonly service: SbPickupPointService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "read",
    possession: "any",
  })
  async _sbPickupPointsMeta(
    @graphql.Args() args: SbPickupPointCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SbPickupPoint])
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "read",
    possession: "any",
  })
  async sbPickupPoints(
    @graphql.Args() args: SbPickupPointFindManyArgs
  ): Promise<SbPickupPoint[]> {
    return this.service.sbPickupPoints(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SbPickupPoint, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "read",
    possession: "own",
  })
  async sbPickupPoint(
    @graphql.Args() args: SbPickupPointFindUniqueArgs
  ): Promise<SbPickupPoint | null> {
    const result = await this.service.sbPickupPoint(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbPickupPoint)
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "create",
    possession: "any",
  })
  async createSbPickupPoint(
    @graphql.Args() args: CreateSbPickupPointArgs
  ): Promise<SbPickupPoint> {
    return await this.service.createSbPickupPoint({
      ...args,
      data: {
        ...args.data,

        routeId: args.data.routeId
          ? {
              connect: args.data.routeId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbPickupPoint)
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "update",
    possession: "any",
  })
  async updateSbPickupPoint(
    @graphql.Args() args: UpdateSbPickupPointArgs
  ): Promise<SbPickupPoint | null> {
    try {
      return await this.service.updateSbPickupPoint({
        ...args,
        data: {
          ...args.data,

          routeId: args.data.routeId
            ? {
                connect: args.data.routeId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SbPickupPoint)
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "delete",
    possession: "any",
  })
  async deleteSbPickupPoint(
    @graphql.Args() args: DeleteSbPickupPointArgs
  ): Promise<SbPickupPoint | null> {
    try {
      return await this.service.deleteSbPickupPoint(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SbEmployee], { name: "sbEmployees" })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "any",
  })
  async findSbEmployees(
    @graphql.Parent() parent: SbPickupPoint,
    @graphql.Args() args: SbEmployeeFindManyArgs
  ): Promise<SbEmployee[]> {
    const results = await this.service.findSbEmployees(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SbRoute, {
    nullable: true,
    name: "routeId",
  })
  @nestAccessControl.UseRoles({
    resource: "SbRoute",
    action: "read",
    possession: "any",
  })
  async getRouteId(
    @graphql.Parent() parent: SbPickupPoint
  ): Promise<SbRoute | null> {
    const result = await this.service.getRouteId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
