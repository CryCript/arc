/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SbPickupPointService } from "../sbPickupPoint.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SbPickupPointCreateInput } from "./SbPickupPointCreateInput";
import { SbPickupPoint } from "./SbPickupPoint";
import { SbPickupPointFindManyArgs } from "./SbPickupPointFindManyArgs";
import { SbPickupPointWhereUniqueInput } from "./SbPickupPointWhereUniqueInput";
import { SbPickupPointUpdateInput } from "./SbPickupPointUpdateInput";
import { SbEmployeeFindManyArgs } from "../../sbEmployee/base/SbEmployeeFindManyArgs";
import { SbEmployee } from "../../sbEmployee/base/SbEmployee";
import { SbEmployeeWhereUniqueInput } from "../../sbEmployee/base/SbEmployeeWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SbPickupPointControllerBase {
  constructor(
    protected readonly service: SbPickupPointService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SbPickupPoint })
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSbPickupPoint(
    @common.Body() data: SbPickupPointCreateInput
  ): Promise<SbPickupPoint> {
    return await this.service.createSbPickupPoint({
      data: {
        ...data,

        route: data.route
          ? {
              connect: data.route,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        maps: true,
        pickupPoint: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SbPickupPoint] })
  @ApiNestedQuery(SbPickupPointFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sbPickupPoints(
    @common.Req() request: Request
  ): Promise<SbPickupPoint[]> {
    const args = plainToClass(SbPickupPointFindManyArgs, request.query);
    return this.service.sbPickupPoints({
      ...args,
      select: {
        createdAt: true,
        id: true,
        maps: true,
        pickupPoint: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SbPickupPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sbPickupPoint(
    @common.Param() params: SbPickupPointWhereUniqueInput
  ): Promise<SbPickupPoint | null> {
    const result = await this.service.sbPickupPoint({
      where: params,
      select: {
        createdAt: true,
        id: true,
        maps: true,
        pickupPoint: true,

        route: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SbPickupPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSbPickupPoint(
    @common.Param() params: SbPickupPointWhereUniqueInput,
    @common.Body() data: SbPickupPointUpdateInput
  ): Promise<SbPickupPoint | null> {
    try {
      return await this.service.updateSbPickupPoint({
        where: params,
        data: {
          ...data,

          route: data.route
            ? {
                connect: data.route,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          maps: true,
          pickupPoint: true,

          route: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SbPickupPoint })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSbPickupPoint(
    @common.Param() params: SbPickupPointWhereUniqueInput
  ): Promise<SbPickupPoint | null> {
    try {
      return await this.service.deleteSbPickupPoint({
        where: params,
        select: {
          createdAt: true,
          id: true,
          maps: true,
          pickupPoint: true,

          route: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sbEmployees")
  @ApiNestedQuery(SbEmployeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "any",
  })
  async findSbEmployees(
    @common.Req() request: Request,
    @common.Param() params: SbPickupPointWhereUniqueInput
  ): Promise<SbEmployee[]> {
    const query = plainToClass(SbEmployeeFindManyArgs, request.query);
    const results = await this.service.findSbEmployees(params.id, {
      ...query,
      select: {
        createdAt: true,

        employee: {
          select: {
            id: true,
          },
        },

        id: true,

        pickupPoint: {
          select: {
            id: true,
          },
        },

        sbOrders: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        vehicleNoShift_1: {
          select: {
            id: true,
          },
        },

        vehicleNoShift_2: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sbEmployees")
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "update",
    possession: "any",
  })
  async connectSbEmployees(
    @common.Param() params: SbPickupPointWhereUniqueInput,
    @common.Body() body: SbEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbEmployees: {
        connect: body,
      },
    };
    await this.service.updateSbPickupPoint({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sbEmployees")
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "update",
    possession: "any",
  })
  async updateSbEmployees(
    @common.Param() params: SbPickupPointWhereUniqueInput,
    @common.Body() body: SbEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbEmployees: {
        set: body,
      },
    };
    await this.service.updateSbPickupPoint({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sbEmployees")
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "update",
    possession: "any",
  })
  async disconnectSbEmployees(
    @common.Param() params: SbPickupPointWhereUniqueInput,
    @common.Body() body: SbEmployeeWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbEmployees: {
        disconnect: body,
      },
    };
    await this.service.updateSbPickupPoint({
      where: params,
      data,
      select: { id: true },
    });
  }
}
