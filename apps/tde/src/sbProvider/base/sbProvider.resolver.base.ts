/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SbProvider } from "./SbProvider";
import { SbProviderCountArgs } from "./SbProviderCountArgs";
import { SbProviderFindManyArgs } from "./SbProviderFindManyArgs";
import { SbProviderFindUniqueArgs } from "./SbProviderFindUniqueArgs";
import { CreateSbProviderArgs } from "./CreateSbProviderArgs";
import { UpdateSbProviderArgs } from "./UpdateSbProviderArgs";
import { DeleteSbProviderArgs } from "./DeleteSbProviderArgs";
import { SbVehicleFindManyArgs } from "../../sbVehicle/base/SbVehicleFindManyArgs";
import { SbVehicle } from "../../sbVehicle/base/SbVehicle";
import { SbProviderService } from "../sbProvider.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SbProvider)
export class SbProviderResolverBase {
  constructor(
    protected readonly service: SbProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "read",
    possession: "any",
  })
  async _sbProvidersMeta(
    @graphql.Args() args: SbProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SbProvider])
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "read",
    possession: "any",
  })
  async sbProviders(
    @graphql.Args() args: SbProviderFindManyArgs
  ): Promise<SbProvider[]> {
    return this.service.sbProviders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SbProvider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "read",
    possession: "own",
  })
  async sbProvider(
    @graphql.Args() args: SbProviderFindUniqueArgs
  ): Promise<SbProvider | null> {
    const result = await this.service.sbProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbProvider)
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "create",
    possession: "any",
  })
  async createSbProvider(
    @graphql.Args() args: CreateSbProviderArgs
  ): Promise<SbProvider> {
    return await this.service.createSbProvider({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbProvider)
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "update",
    possession: "any",
  })
  async updateSbProvider(
    @graphql.Args() args: UpdateSbProviderArgs
  ): Promise<SbProvider | null> {
    try {
      return await this.service.updateSbProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SbProvider)
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "delete",
    possession: "any",
  })
  async deleteSbProvider(
    @graphql.Args() args: DeleteSbProviderArgs
  ): Promise<SbProvider | null> {
    try {
      return await this.service.deleteSbProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SbVehicle], { name: "sbVehicles" })
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "any",
  })
  async findSbVehicles(
    @graphql.Parent() parent: SbProvider,
    @graphql.Args() args: SbVehicleFindManyArgs
  ): Promise<SbVehicle[]> {
    const results = await this.service.findSbVehicles(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
