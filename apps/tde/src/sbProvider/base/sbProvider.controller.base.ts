/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SbProviderService } from "../sbProvider.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SbProviderCreateInput } from "./SbProviderCreateInput";
import { SbProvider } from "./SbProvider";
import { SbProviderFindManyArgs } from "./SbProviderFindManyArgs";
import { SbProviderWhereUniqueInput } from "./SbProviderWhereUniqueInput";
import { SbProviderUpdateInput } from "./SbProviderUpdateInput";
import { SbVehicleFindManyArgs } from "../../sbVehicle/base/SbVehicleFindManyArgs";
import { SbVehicle } from "../../sbVehicle/base/SbVehicle";
import { SbVehicleWhereUniqueInput } from "../../sbVehicle/base/SbVehicleWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SbProviderControllerBase {
  constructor(
    protected readonly service: SbProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SbProvider })
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSbProvider(
    @common.Body() data: SbProviderCreateInput
  ): Promise<SbProvider> {
    return await this.service.createSbProvider({
      data: data,
      select: {
        address: true,
        company: true,
        createdAt: true,
        email: true,
        id: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SbProvider] })
  @ApiNestedQuery(SbProviderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sbProviders(@common.Req() request: Request): Promise<SbProvider[]> {
    const args = plainToClass(SbProviderFindManyArgs, request.query);
    return this.service.sbProviders({
      ...args,
      select: {
        address: true,
        company: true,
        createdAt: true,
        email: true,
        id: true,
        phone: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SbProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sbProvider(
    @common.Param() params: SbProviderWhereUniqueInput
  ): Promise<SbProvider | null> {
    const result = await this.service.sbProvider({
      where: params,
      select: {
        address: true,
        company: true,
        createdAt: true,
        email: true,
        id: true,
        phone: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SbProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSbProvider(
    @common.Param() params: SbProviderWhereUniqueInput,
    @common.Body() data: SbProviderUpdateInput
  ): Promise<SbProvider | null> {
    try {
      return await this.service.updateSbProvider({
        where: params,
        data: data,
        select: {
          address: true,
          company: true,
          createdAt: true,
          email: true,
          id: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SbProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSbProvider(
    @common.Param() params: SbProviderWhereUniqueInput
  ): Promise<SbProvider | null> {
    try {
      return await this.service.deleteSbProvider({
        where: params,
        select: {
          address: true,
          company: true,
          createdAt: true,
          email: true,
          id: true,
          phone: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sbVehicles")
  @ApiNestedQuery(SbVehicleFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "any",
  })
  async findSbVehicles(
    @common.Req() request: Request,
    @common.Param() params: SbProviderWhereUniqueInput
  ): Promise<SbVehicle[]> {
    const query = plainToClass(SbVehicleFindManyArgs, request.query);
    const results = await this.service.findSbVehicles(params.id, {
      ...query,
      select: {
        createdAt: true,
        driver: true,
        driverPhoto: true,
        email: true,
        id: true,
        noPol: true,
        noUnit: true,
        phoneNo: true,

        providerId: {
          select: {
            id: true,
          },
        },

        routeId: {
          select: {
            id: true,
          },
        },

        shift: true,
        updatedAt: true,
        vehiclePhoto: true,
        vehicleType: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sbVehicles")
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "update",
    possession: "any",
  })
  async connectSbVehicles(
    @common.Param() params: SbProviderWhereUniqueInput,
    @common.Body() body: SbVehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbVehicles: {
        connect: body,
      },
    };
    await this.service.updateSbProvider({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sbVehicles")
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "update",
    possession: "any",
  })
  async updateSbVehicles(
    @common.Param() params: SbProviderWhereUniqueInput,
    @common.Body() body: SbVehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbVehicles: {
        set: body,
      },
    };
    await this.service.updateSbProvider({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sbVehicles")
  @nestAccessControl.UseRoles({
    resource: "SbProvider",
    action: "update",
    possession: "any",
  })
  async disconnectSbVehicles(
    @common.Param() params: SbProviderWhereUniqueInput,
    @common.Body() body: SbVehicleWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbVehicles: {
        disconnect: body,
      },
    };
    await this.service.updateSbProvider({
      where: params,
      data,
      select: { id: true },
    });
  }
}
