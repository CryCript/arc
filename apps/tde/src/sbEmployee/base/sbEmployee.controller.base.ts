/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { SbEmployeeService } from "../sbEmployee.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { SbEmployeeCreateInput } from "./SbEmployeeCreateInput";
import { SbEmployee } from "./SbEmployee";
import { SbEmployeeFindManyArgs } from "./SbEmployeeFindManyArgs";
import { SbEmployeeWhereUniqueInput } from "./SbEmployeeWhereUniqueInput";
import { SbEmployeeUpdateInput } from "./SbEmployeeUpdateInput";
import { SbOrderFindManyArgs } from "../../sbOrder/base/SbOrderFindManyArgs";
import { SbOrder } from "../../sbOrder/base/SbOrder";
import { SbOrderWhereUniqueInput } from "../../sbOrder/base/SbOrderWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class SbEmployeeControllerBase {
  constructor(
    protected readonly service: SbEmployeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: SbEmployee })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createSbEmployee(
    @common.Body() data: SbEmployeeCreateInput
  ): Promise<SbEmployee> {
    return await this.service.createSbEmployee({
      data: {
        ...data,

        employeeId: data.employeeId
          ? {
              connect: data.employeeId,
            }
          : undefined,

        pickupPointId: data.pickupPointId
          ? {
              connect: data.pickupPointId,
            }
          : undefined,

        shift_1UnitId: data.shift_1UnitId
          ? {
              connect: data.shift_1UnitId,
            }
          : undefined,

        shift_2UnitId: data.shift_2UnitId
          ? {
              connect: data.shift_2UnitId,
            }
          : undefined,
      },
      select: {
        createdAt: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,

        pickupPointId: {
          select: {
            id: true,
          },
        },

        shift_1UnitId: {
          select: {
            id: true,
          },
        },

        shift_2UnitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [SbEmployee] })
  @ApiNestedQuery(SbEmployeeFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sbEmployees(@common.Req() request: Request): Promise<SbEmployee[]> {
    const args = plainToClass(SbEmployeeFindManyArgs, request.query);
    return this.service.sbEmployees({
      ...args,
      select: {
        createdAt: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,

        pickupPointId: {
          select: {
            id: true,
          },
        },

        shift_1UnitId: {
          select: {
            id: true,
          },
        },

        shift_2UnitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: SbEmployee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async sbEmployee(
    @common.Param() params: SbEmployeeWhereUniqueInput
  ): Promise<SbEmployee | null> {
    const result = await this.service.sbEmployee({
      where: params,
      select: {
        createdAt: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,

        pickupPointId: {
          select: {
            id: true,
          },
        },

        shift_1UnitId: {
          select: {
            id: true,
          },
        },

        shift_2UnitId: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: SbEmployee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateSbEmployee(
    @common.Param() params: SbEmployeeWhereUniqueInput,
    @common.Body() data: SbEmployeeUpdateInput
  ): Promise<SbEmployee | null> {
    try {
      return await this.service.updateSbEmployee({
        where: params,
        data: {
          ...data,

          employeeId: data.employeeId
            ? {
                connect: data.employeeId,
              }
            : undefined,

          pickupPointId: data.pickupPointId
            ? {
                connect: data.pickupPointId,
              }
            : undefined,

          shift_1UnitId: data.shift_1UnitId
            ? {
                connect: data.shift_1UnitId,
              }
            : undefined,

          shift_2UnitId: data.shift_2UnitId
            ? {
                connect: data.shift_2UnitId,
              }
            : undefined,
        },
        select: {
          createdAt: true,

          employeeId: {
            select: {
              id: true,
            },
          },

          id: true,

          pickupPointId: {
            select: {
              id: true,
            },
          },

          shift_1UnitId: {
            select: {
              id: true,
            },
          },

          shift_2UnitId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: SbEmployee })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteSbEmployee(
    @common.Param() params: SbEmployeeWhereUniqueInput
  ): Promise<SbEmployee | null> {
    try {
      return await this.service.deleteSbEmployee({
        where: params,
        select: {
          createdAt: true,

          employeeId: {
            select: {
              id: true,
            },
          },

          id: true,

          pickupPointId: {
            select: {
              id: true,
            },
          },

          shift_1UnitId: {
            select: {
              id: true,
            },
          },

          shift_2UnitId: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/sbOrders")
  @ApiNestedQuery(SbOrderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "SbOrder",
    action: "read",
    possession: "any",
  })
  async findSbOrders(
    @common.Req() request: Request,
    @common.Param() params: SbEmployeeWhereUniqueInput
  ): Promise<SbOrder[]> {
    const query = plainToClass(SbOrderFindManyArgs, request.query);
    const results = await this.service.findSbOrders(params.id, {
      ...query,
      select: {
        createdAt: true,
        date: true,

        employeeId: {
          select: {
            id: true,
          },
        },

        id: true,
        shift: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/sbOrders")
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "update",
    possession: "any",
  })
  async connectSbOrders(
    @common.Param() params: SbEmployeeWhereUniqueInput,
    @common.Body() body: SbOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbOrders: {
        connect: body,
      },
    };
    await this.service.updateSbEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/sbOrders")
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "update",
    possession: "any",
  })
  async updateSbOrders(
    @common.Param() params: SbEmployeeWhereUniqueInput,
    @common.Body() body: SbOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbOrders: {
        set: body,
      },
    };
    await this.service.updateSbEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/sbOrders")
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "update",
    possession: "any",
  })
  async disconnectSbOrders(
    @common.Param() params: SbEmployeeWhereUniqueInput,
    @common.Body() body: SbOrderWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      sbOrders: {
        disconnect: body,
      },
    };
    await this.service.updateSbEmployee({
      where: params,
      data,
      select: { id: true },
    });
  }
}
