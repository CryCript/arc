/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SbEmployee } from "./SbEmployee";
import { SbEmployeeCountArgs } from "./SbEmployeeCountArgs";
import { SbEmployeeFindManyArgs } from "./SbEmployeeFindManyArgs";
import { SbEmployeeFindUniqueArgs } from "./SbEmployeeFindUniqueArgs";
import { CreateSbEmployeeArgs } from "./CreateSbEmployeeArgs";
import { UpdateSbEmployeeArgs } from "./UpdateSbEmployeeArgs";
import { DeleteSbEmployeeArgs } from "./DeleteSbEmployeeArgs";
import { SbOrderFindManyArgs } from "../../sbOrder/base/SbOrderFindManyArgs";
import { SbOrder } from "../../sbOrder/base/SbOrder";
import { DbEmployee } from "../../dbEmployee/base/DbEmployee";
import { SbPickupPoint } from "../../sbPickupPoint/base/SbPickupPoint";
import { SbVehicle } from "../../sbVehicle/base/SbVehicle";
import { SbEmployeeService } from "../sbEmployee.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SbEmployee)
export class SbEmployeeResolverBase {
  constructor(
    protected readonly service: SbEmployeeService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "any",
  })
  async _sbEmployeesMeta(
    @graphql.Args() args: SbEmployeeCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SbEmployee])
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "any",
  })
  async sbEmployees(
    @graphql.Args() args: SbEmployeeFindManyArgs
  ): Promise<SbEmployee[]> {
    return this.service.sbEmployees(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SbEmployee, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "read",
    possession: "own",
  })
  async sbEmployee(
    @graphql.Args() args: SbEmployeeFindUniqueArgs
  ): Promise<SbEmployee | null> {
    const result = await this.service.sbEmployee(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbEmployee)
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "create",
    possession: "any",
  })
  async createSbEmployee(
    @graphql.Args() args: CreateSbEmployeeArgs
  ): Promise<SbEmployee> {
    return await this.service.createSbEmployee({
      ...args,
      data: {
        ...args.data,

        employeeId: args.data.employeeId
          ? {
              connect: args.data.employeeId,
            }
          : undefined,

        pickupPointId: args.data.pickupPointId
          ? {
              connect: args.data.pickupPointId,
            }
          : undefined,

        shift_1UnitId: args.data.shift_1UnitId
          ? {
              connect: args.data.shift_1UnitId,
            }
          : undefined,

        shift_2UnitId: args.data.shift_2UnitId
          ? {
              connect: args.data.shift_2UnitId,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SbEmployee)
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "update",
    possession: "any",
  })
  async updateSbEmployee(
    @graphql.Args() args: UpdateSbEmployeeArgs
  ): Promise<SbEmployee | null> {
    try {
      return await this.service.updateSbEmployee({
        ...args,
        data: {
          ...args.data,

          employeeId: args.data.employeeId
            ? {
                connect: args.data.employeeId,
              }
            : undefined,

          pickupPointId: args.data.pickupPointId
            ? {
                connect: args.data.pickupPointId,
              }
            : undefined,

          shift_1UnitId: args.data.shift_1UnitId
            ? {
                connect: args.data.shift_1UnitId,
              }
            : undefined,

          shift_2UnitId: args.data.shift_2UnitId
            ? {
                connect: args.data.shift_2UnitId,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SbEmployee)
  @nestAccessControl.UseRoles({
    resource: "SbEmployee",
    action: "delete",
    possession: "any",
  })
  async deleteSbEmployee(
    @graphql.Args() args: DeleteSbEmployeeArgs
  ): Promise<SbEmployee | null> {
    try {
      return await this.service.deleteSbEmployee(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [SbOrder], { name: "sbOrders" })
  @nestAccessControl.UseRoles({
    resource: "SbOrder",
    action: "read",
    possession: "any",
  })
  async findSbOrders(
    @graphql.Parent() parent: SbEmployee,
    @graphql.Args() args: SbOrderFindManyArgs
  ): Promise<SbOrder[]> {
    const results = await this.service.findSbOrders(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => DbEmployee, {
    nullable: true,
    name: "employeeId",
  })
  @nestAccessControl.UseRoles({
    resource: "DbEmployee",
    action: "read",
    possession: "any",
  })
  async getEmployeeId(
    @graphql.Parent() parent: SbEmployee
  ): Promise<DbEmployee | null> {
    const result = await this.service.getEmployeeId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SbPickupPoint, {
    nullable: true,
    name: "pickupPointId",
  })
  @nestAccessControl.UseRoles({
    resource: "SbPickupPoint",
    action: "read",
    possession: "any",
  })
  async getPickupPointId(
    @graphql.Parent() parent: SbEmployee
  ): Promise<SbPickupPoint | null> {
    const result = await this.service.getPickupPointId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SbVehicle, {
    nullable: true,
    name: "shift_1UnitId",
  })
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "any",
  })
  async getShift_1UnitId(
    @graphql.Parent() parent: SbEmployee
  ): Promise<SbVehicle | null> {
    const result = await this.service.getShift_1UnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => SbVehicle, {
    nullable: true,
    name: "shift_2UnitId",
  })
  @nestAccessControl.UseRoles({
    resource: "SbVehicle",
    action: "read",
    possession: "any",
  })
  async getShift_2UnitId(
    @graphql.Parent() parent: SbEmployee
  ): Promise<SbVehicle | null> {
    const result = await this.service.getShift_2UnitId(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
