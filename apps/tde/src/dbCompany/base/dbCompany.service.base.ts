/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  DbCompany as PrismaDbCompany,
  DbEmployee as PrismaDbEmployee,
  User as PrismaUser,
} from "@prisma/client";

export class DbCompanyServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DbCompanyCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dbCompany.count(args);
  }

  async dbCompanies<T extends Prisma.DbCompanyFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbCompanyFindManyArgs>
  ): Promise<PrismaDbCompany[]> {
    return this.prisma.dbCompany.findMany<Prisma.DbCompanyFindManyArgs>(args);
  }
  async dbCompany<T extends Prisma.DbCompanyFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbCompanyFindUniqueArgs>
  ): Promise<PrismaDbCompany | null> {
    return this.prisma.dbCompany.findUnique(args);
  }
  async createDbCompany<T extends Prisma.DbCompanyCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbCompanyCreateArgs>
  ): Promise<PrismaDbCompany> {
    return this.prisma.dbCompany.create<T>(args);
  }
  async updateDbCompany<T extends Prisma.DbCompanyUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbCompanyUpdateArgs>
  ): Promise<PrismaDbCompany> {
    return this.prisma.dbCompany.update<T>(args);
  }
  async deleteDbCompany<T extends Prisma.DbCompanyDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.DbCompanyDeleteArgs>
  ): Promise<PrismaDbCompany> {
    return this.prisma.dbCompany.delete(args);
  }

  async findDbEmployees(
    parentId: string,
    args: Prisma.DbEmployeeFindManyArgs
  ): Promise<PrismaDbEmployee[]> {
    return this.prisma.dbCompany
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dbEmployees(args);
  }

  async findUsers(
    parentId: string,
    args: Prisma.UserFindManyArgs
  ): Promise<PrismaUser[]> {
    return this.prisma.dbCompany
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .users(args);
  }
}
